//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model Airport {
  id                        String   @id() @default(uuid())
  code                      String?
  name                      String?
  city                      String?
  country                   String?
  flightsAsDepartureAirport Flight[] @relation("departureAirport")
  flightsAsArrivalAirport   Flight[] @relation("arrivalAirport")
  dateCreated               DateTime @default(now())
  dateUpdated               DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Aircraft {
  id          String   @id() @default(uuid())
  model       String?
  capacity    Float?
  flights     Flight[] @relation("aircraft")
  seats       Seat[]   @relation("aircraft")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Flight {
  id                    String    @id() @default(uuid())
  flightNumber          String?
  departureTime         String?
  arrivalTime           String?
  departureAirportId    String?
  departureAirport      Airport?  @relation(fields: [departureAirportId], references: [id], name: "departureAirport")
  arrivalAirportId      String?
  arrivalAirport        Airport?  @relation(fields: [arrivalAirportId], references: [id], name: "arrivalAirport")
  aircraftId            String?
  aircraft              Aircraft? @relation(fields: [aircraftId], references: [id], name: "aircraft")
  region                String?
  price                 Float?
  averageEstimatedPrice Float?
  seats                 Seat[]    @relation("flight")
  bookings              Booking[] @relation("flight")
  dateCreated           DateTime  @default(now())
  dateUpdated           DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Seat {
  id          String    @id() @default(cuid())
  seatNumber  String
  class       String
  aircraftId  String?
  aircraft    Aircraft? @relation(fields: [aircraftId], references: [id], name: "aircraft")
  flightId    String
  flight      Flight    @relation(fields: [flightId], references: [id], name: "flight")
  bookings    Booking[] @relation("seat")
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Passenger {
  id             String    @id() @default(uuid())
  firstName      String?
  lastName       String?
  passportNumber String?
  userId         String?
  user           User?     @relation(fields: [userId], references: [id], name: "user")
  bookings       Booking[] @relation("passenger")
  dateCreated    DateTime  @default(now())
  dateUpdated    DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Booking {
  id          String     @id() @default(uuid())
  bookingDate String?
  status      String?
  userId      String?
  user        User?      @relation(fields: [userId], references: [id], name: "user")
  flightId    String?
  flight      Flight?    @relation(fields: [flightId], references: [id], name: "flight")
  passengerId String?
  passenger   Passenger? @relation(fields: [passengerId], references: [id], name: "passenger")
  seatId      String?
  seat        Seat?      @relation(fields: [seatId], references: [id], name: "seat")
  payments    Payment[]  @relation("booking")
  dateCreated DateTime   @default(now())
  dateUpdated DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Payment {
  id            String   @id() @default(uuid())
  amount        String?
  paymentDate   String?
  paymentMethod String?
  status        String?
  bookingId     String?
  booking       Booking? @relation(fields: [bookingId], references: [id], name: "booking")
  dateCreated   DateTime @default(now())
  dateUpdated   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Notification {
  id          String   @id() @default(uuid())
  message     String?
  readAt      String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SupportTicket {
  id          String   @id() @default(uuid())
  subject     String?
  description String?
  status      String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id              String          @id() @default(uuid())
  name            String?
  email           String?         @unique()
  pictureUrl      String?         @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation String?
  emailVerified   Boolean?
  status          UserStatus      @default(VERIFIED)
  globalRole      String          @default("USER")
  /// @password
  /// @omit
  password        String?
  dateCreated     DateTime        @default(now())
  dateUpdated     DateTime        @default(now()) @updatedAt()
  accounts        Account[]
  sessions        Session[]
  passengers      Passenger[]     @relation("user")
  bookings        Booking[]       @relation("user")
  notifications   Notification[]  @relation("user")
  supportTickets  SupportTicket[] @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
